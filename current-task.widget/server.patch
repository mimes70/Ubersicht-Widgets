--- server.js.original	2017-10-31 16:07:29.000000000 +0000
+++ server.js	2017-10-31 16:07:38.000000000 +0000
@@ -391,7 +391,101 @@
     return settings.persist(store.getState().settings);
   });
   messageBus = null;
-  server = connect().use(CommandServer(widgetPath, options.loginShell)).use(StateServer(store)).use(serveStatic(path.resolve(__dirname, './public'))).use(serveStatic(widgetPath)).use(serveClient).listen(port, '127.0.0.1', function(err) {
+
+
+   var WID = XXXXXX;
+   var TogglClient = require('toggl-api'), toggl = new TogglClient({apiToken: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'});
+
+   function getEntryByKey(array, key, value, key2, value2) {
+   	if(!value) return null;
+   	for(var i = 0; array && i < array.length ; i++) {
+   		//console.log(array[i][key]);
+   		if(array[i][key] == value && (!key2 || !value2 && !array[i][key2] || array[i][key2] == value2)) {
+   			return array[i];
+   		}
+   	}
+   	//flag não encontrado
+   	return {id:-1};
+   }
+
+   function startTimeWithPid(pid, timeDescription) {
+   	toggl.startTimeEntry({"description":timeDescription, "pid": pid }, function(err, taskData) {
+   		console.log("Created task:", timeDescription, taskData.id );
+   	});
+   }
+
+   function startTimeWithCid(cid, projectName, timeDescription) {
+   	var next = function(projects) {
+   		var p = getEntryByKey(projects, "name", projectName, "cid", cid);
+   		//Cria se o id for a flag de 'não encontrado' ou se o cliente do projecto não é o cliente pretendido
+   		if(p && (p.id < 0 || (cid && p.cid != cid))) {
+   			toggl.createProject({"name":projectName, "wid":WID, "cid":cid, "is_private":false }, function(err, projectData) {
+   				console.log("Created project:", projectName, projectData.id);
+   				startTimeWithPid(projectData.id, timeDescription);
+   			});
+   		} else {
+   			if(p) {
+   				console.log('ProjectId: '+p.id);
+   				startTimeWithPid(p.id, timeDescription);
+   			} else {
+   				console.log('No project');
+   				startTimeWithPid(null, timeDescription);
+   			}
+   		}
+   	}
+
+   	if(cid) {
+   		toggl.getClientProjects(cid, true, function(err, projects) {
+   			next(projects);
+   		});
+   	} else {
+   		toggl.getWorkspaceProjects(WID, function(err, projects) {
+   			next(projects);
+   		});
+   	}
+   }
+
+   function startTime(clientName,projectName,timeDescription) {
+      	if (!clientName) {
+      		console.log('No client');
+      		startTimeWithCid(null, projectName, timeDescription);
+      	} else {
+      		toggl.getClients(function(err, clients) {
+      			var c = getEntryByKey(clients, "name", clientName);
+      			if(c && c.id < 0) {
+      				toggl.createClient({"name":clientName, "wid":WID}, function(err, clientData) {
+      					console.log("Created client:", clientName, clientData.id);
+      					startTimeWithCid(clientData.id, projectName, timeDescription);
+      				});
+      			} else if(c) {
+      				console.log('ClientId: '+c.id);
+      				startTimeWithCid(c.id, projectName, timeDescription);
+      			}
+      		});
+      	}
+   }
+
+   server = connect().use(CommandServer(widgetPath, options.loginShell)).use(StateServer(store)).use('/status', function fooMiddleware(req, res, next) {
+	   toggl.getCurrentTimeEntry(function(err, timeEntry) {
+		if(timeEntry) {
+			var now = new Date();
+			var timeLapse = new Date(now - new Date(timeEntry.start));
+			var timeLapseStr = ("0"+timeLapse.getHours()).slice(-2)+":"+("0"+timeLapse.getMinutes()).slice(-2);
+			res.end("On:"+ (timeEntry.description?timeEntry.description:"")+"\n"+timeLapseStr);
+		} else {
+			res.end("Off");
+		}
+	   });
+   }).use('/start', function fooMiddleware(req, res, next) {
+	   var args = req.url.substr(1).split('/');
+	   startTime(decodeURIComponent(args[0]), args[1]?decodeURIComponent(args[1]):"Generic", decodeURIComponent(args[2]));
+   }).use('/stop', function fooMiddleware(req, res, next) {
+	   toggl.getCurrentTimeEntry(function(err, timeEntry) {
+		toggl.stopTimeEntry(timeEntry.id, function(err) {
+			res.end('Stop: '+timeEntry.description);
+		});
+	   });
+   }).use(serveStatic(path.resolve(__dirname, './public'))).use(serveStatic(widgetPath)).use(serveClient).listen(port, '127.0.0.1', function(err) {
     var e;
     try {
       if (err) {
